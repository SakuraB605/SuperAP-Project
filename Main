package home.sj;

//import java.awt.Color;
import java.util.ArrayList;

public class Main {
	static Square[][] arr = new Square[25][25];
  public static void main(String[] args) {
  		   arr = new Square[25][25];
		   arr[0][6] = new Square(12, null);
		   arr[1][1] = new Square(4, null);
		   arr[1][13] = new Square(1, null);
		   arr[1][15] = new Square(3, null);
		   arr[1][17] = new Square(16, null);
		   arr[2][11] = new Square(4, null);
		   arr[2][13] = new Square(1, null);
		   arr[2][14] = new Square(3, null);
		   arr[2][17] = new Square(1, null);
		   arr[2][18] = new Square(3, null);
		   arr[3][4] = new Square(18, null);
		   arr[3][12] = new Square(2, null);
		   arr[3][13] = new Square(5, null);
		   arr[3][18] = new Square(2, null);
		   arr[3][22] = new Square(4, null);
		   arr[3][23] = new Square(2, null);
		   arr[4][8] = new Square(25, null);
		   arr[4][13] = new Square(1, null);
		   arr[4][14] = new Square(1, null);
		   arr[4][15] = new Square(1, null);
		   arr[4][16] = new Square(1, null);
		   arr[4][17] = new Square(2, null);
		   arr[4][18] = new Square(4, null);
		   arr[5][10] = new Square(17, null);
		   arr[5][12] = new Square(10, null);
		   arr[5][14] = new Square(4, null);
		   arr[5][19] = new Square(6, null);
		   arr[5][20] = new Square(4, null);
		   arr[5][21] = new Square(2, null);
		   arr[5][22] = new Square(2, null);
		   arr[5][23] = new Square(2, null);
		   arr[6][1] = new Square(13, null);
		   arr[6][4] = new Square(1, null);
		   arr[6][6] = new Square(3, null);
		   arr[6][9] = new Square(2, null);
		   arr[6][13] = new Square(2, null);
		   arr[6][15] = new Square(1, null);
		   arr[6][17] = new Square(2, null);
		   arr[6][21] = new Square(1, null);
		   arr[6][22] = new Square(2, null);
		   arr[7][6] = new Square(3, null);
		   arr[7][8] = new Square(1, null);
		   arr[7][9] = new Square(1, null);
		   arr[7][13] = new Square(1, null);
		   arr[7][15] = new Square(3, null);
		   arr[7][17] = new Square(1, null);
		   arr[7][21] = new Square(6, null);
		   arr[7][24] = new Square(8, null);
		   arr[8][2] = new Square(8, null);
		   arr[8][5] = new Square(1, null);
		   arr[8][6] = new Square(1, null);
		   arr[8][15] = new Square(3, null);
		   arr[8][18] = new Square(2, null);
		   arr[9][4] = new Square(3, null);
		   arr[9][5] = new Square(1, null);
		   arr[9][6] = new Square(1, null);
		   arr[9][13] = new Square(6, null);
		   arr[9][18] = new Square(1, null);
		   arr[9][20] = new Square(1, null);
		   arr[9][21] = new Square(1, null);
		   arr[9][22] = new Square(1, null);
		   arr[9][23] = new Square(3, null);
		   arr[10][0] = new Square(19, null);
		   arr[10][5] = new Square(4, null);
		   arr[10][8] = new Square(6, null);
		   arr[10][9] = new Square(3, null);
		   arr[10][14] = new Square(2, null);
		   arr[10][17] = new Square(6, null);
		   arr[10][21] = new Square(15, null);
		   arr[11][3] = new Square(1, null);
		   arr[11][4] = new Square(1, null);
		   arr[11][5] = new Square(2, null);
		   arr[11][6] = new Square(1, null);
		   arr[11][7] = new Square(1, null);
		   arr[11][8] = new Square(1, null);
		   arr[11][11] = new Square(7, null);
		   arr[11][14] = new Square(1, null);
		   arr[11][15] = new Square(1, null);
		   arr[11][17] = new Square(2, null);
		   arr[11][18] = new Square(2, null);
		   arr[11][19] = new Square(2, null);
		   arr[12][3] = new Square(2, null);
		   arr[12][6] = new Square(1, null);
		   arr[12][8] = new Square(1, null);
		   arr[12][12] = new Square(4, null);
		   arr[12][15] = new Square(2, null);
		   arr[12][17] = new Square(2, null);
		   arr[12][18] = new Square(1, null);
		   arr[12][19] = new Square(3, null);
		   arr[13][4] = new Square(3, null);
		   arr[13][6] = new Square(1, null);
		   arr[13][7] = new Square(2, null);
		   arr[13][8] = new Square(1, null);
		   arr[13][9] = new Square(6, null);
		   arr[13][12] = new Square(1, null);
		   arr[13][14] = new Square(1, null);
		   arr[13][15] = new Square(1, null);
		   arr[13][16] = new Square(1, null);
		   arr[13][17] = new Square(1, null);
		   arr[13][22] = new Square(15, null);
		   arr[14][3] = new Square(3, null);
		   arr[14][4] = new Square(1, null);
		   arr[14][5] = new Square(4, null);
		   arr[14][14] = new Square(2, null);
		   arr[14][15] = new Square(1, null);
		   arr[14][17] = new Square(4, null);
		   arr[14][18] = new Square(3, null);
		   arr[15][2] = new Square(6, null);
		   arr[15][4] = new Square(2, null);
		   arr[15][8] = new Square(2, null);
		   arr[15][12] = new Square(2, null);
		   arr[15][13] = new Square(2, null);
		   arr[15][14] = new Square(1, null);
		   arr[15][15] = new Square(1, null);
		   arr[15][1] = new Square(1, null);
		   arr[16][2] = new Square(1, null);
		   arr[16][4] = new Square(2, null);
		   arr[16][6] = new Square(2, null);
		   arr[16][7] = new Square(2, null);
		   arr[16][8] = new Square(1, null);
		   arr[16][12] = new Square(2, null);
		   arr[16][14] = new Square(2, null);
		   arr[16][15] = new Square(2, null);
		   arr[16][19] = new Square(3, null);
		   arr[16][21] = new Square(1, null);
		   arr[16][23] = new Square(2, null);
		   arr[17][1] = new Square(4, null);
		   arr[17][2] = new Square(1, null);
		   arr[17][3] = new Square(3, null);
		   arr[17][6] = new Square(2, null);
		   arr[17][9] = new Square(2, null);
		   arr[17][13] = new Square(3, null);
		   arr[17][17] = new Square(4, null);
		   arr[17][18] = new Square(3, null);
		   arr[17][21] = new Square(1, null);
		   arr[17][22] = new Square(1, null);
		   arr[17][23] = new Square(1, null);
		   arr[17][24] = new Square(7, null);
		   arr[18][2] = new Square(3, null);
		   arr[18][4] = new Square(3, null);
		   arr[18][10] = new Square(6, null);
		   arr[18][14] = new Square(1, null);
		   arr[18][15] = new Square(2, null);
		   arr[18][18] = new Square(5, null);
		   arr[18][21] = new Square(1, null);
		   arr[18][22] = new Square(2, null);
		   arr[19][3] = new Square(2, null);
		   arr[19][11] = new Square(6, null);
		   arr[19][13] = new Square(2, null);
		   arr[19][14] = new Square(1, null);
		   arr[19][16] = new Square(5, null);
		   arr[19][22] = new Square(2, null);
		   arr[19][23] = new Square(1, null);
		   arr[20][1] = new Square(2, null);
		   arr[20][3] = new Square(2, null);
		   arr[20][5] = new Square(2, null);
		   arr[20][11] = new Square(6, null);
		   arr[20][12] = new Square(3, null);
		   arr[20][13] = new Square(2, null);
		   arr[20][19] = new Square(4, null);
		   arr[20][20] = new Square(2, null);
		   arr[20][21] = new Square(3, null);
		   arr[20][22] = new Square(4, null);
		   arr[21][0] = new Square(3, null);
		   arr[21][3] = new Square(1, null);
		   arr[21][7] = new Square(5, null);
		   arr[21][11] = new Square(6, null);
		   arr[21][15] = new Square(4, null);
		   arr[21][18] = new Square(4, null);
		   arr[22][0] = new Square(1, null);
		   arr[22][1] = new Square(1, null);
		   arr[22][3] = new Square(2, null);
		   arr[22][6] = new Square(10, null);
		   arr[22][12] = new Square(1, null);
		   arr[22][13] = new Square(2, null);
		   arr[22][18] = new Square(5, null);
		   arr[22][20] = new Square(1, null);
		   arr[22][22] = new Square(1, null);
		   arr[22][23] = new Square(1, null);
		   arr[23][0] = new Square(1, null);
		   arr[23][1] = new Square(1, null);
		   arr[23][3] = new Square(2, null);
		   arr[23][12] = new Square(13, null);
		   arr[23][22] = new Square(1, null);
		   arr[23][23] = new Square(2, null);
		   arr[24][15] = new Square(25, null);
/*
    arr[0][0] = new Square(5, null);
    arr[0][9] = new Square(5, null);
    arr[0][10] = new Square(1, null);
    arr[0][12] = new Square(6, null);

    arr[1][0] = new Square(3, null);
    arr[1][2] = new Square(2, null);
    arr[1][4] = new Square(8, null);
    arr[1][11] = new Square(2, null);

    arr[2][1] = new Square(1, null);
    arr[2][2] = new Square(1, null);
    arr[2][3] = new Square(2, null);
    arr[2][5] = new Square(1, null);
    arr[2][8] = new Square(5, null);
    arr[2][11] = new Square(1, null);

    arr[3][4] = new Square(4, null);
    arr[3][5] = new Square(1, null);
    arr[3][6] = new Square(5, null);

    arr[4][0] = new Square(2, null);
    arr[4][5] = new Square(6, null);
    arr[4][8] = new Square(1, null);
    arr[4][10] = new Square(1, null);
    arr[4][12] = new Square(2, null);
    arr[4][13] = new Square(2, null);

    arr[5][0] = new Square(4, null);
    arr[5][4] = new Square(4, null);
    arr[5][6] = new Square(4, null);
    arr[5][13] = new Square(2, null);

    arr[6][4] = new Square(4, null);
    arr[6][8] = new Square(6, null);
    arr[6][9] = new Square(3, null);
    arr[6][13] = new Square(2, null);

    arr[7][4] = new Square(4, null);
    arr[7][5] = new Square(3, null);
    arr[7][9] = new Square(1, null);
    arr[7][13] = new Square(2, null);

    arr[8][5] = new Square(5, null);
    arr[8][7] = new Square(1, null);
    arr[8][9] = new Square(2, null);
    arr[8][13] = new Square(2, null);

    arr[9][4] = new Square(5, null);
    arr[9][6] = new Square(2, null);
    arr[9][8] = new Square(3, null);
    arr[9][10] = new Square(5, null);
    arr[9][11] = new Square(7, null);
    arr[9][13] = new Square(2, null);
    arr[9][14] = new Square(15, null);

    arr[10][0] = new Square(2, null);
    arr[10][1] = new Square(5, null);
    arr[10][6] = new Square(4, null);
    arr[10][12] = new Square(3, null);

    arr[11][4] = new Square(5, null);
    arr[11][13] = new Square(3, null);

    arr[12][1] = new Square(6, null);
    arr[12][7] = new Square(18, null);
    arr[12][9] = new Square(6, null);
    arr[12][10] = new Square(3, null);
    arr[12][11] = new Square(1, null);
    arr[12][12] = new Square(1, null);

    arr[13][9] = new Square(8, null);
    arr[13][12] = new Square(1, null);
    arr[13][13] = new Square(2, null);

    arr[14][12] = new Square(1, null);
    arr[14][13] = new Square(1, null);
*/
    /*
     * Square[][] arr = new Square[6][4]; arr[0][0] = null; arr[0][1] = new
     * Square(1, null); arr[0][2] = new Square(3, null); arr[0][3] = new Square(1,
     * null); arr[1][0] = new Square(2, null); arr[1][1] = new Square(1, null);
     * arr[1][2] = null; arr[1][3] = new Square(1, null); arr[2][0] = new Square(1,
     * null); arr[2][1] = new Square(1, null); arr[2][2] = null; arr[2][3] = new
     * Square(1, null); arr[3][0] = null; arr[3][1] = null; arr[3][2] = new
     * Square(3, null); arr[3][3] = new Square(1, null); arr[4][0] = new Square(2,
     * null); arr[4][1] = null; arr[4][2] = null; arr[4][3] = new Square(2, null);
     * arr[5][0] = new Square(4, null); arr[5][1] = null; arr[5][2] = null;
     * arr[5][3] = null;
     */

    printPuzzle();
    permLists();
    

    for (int x = 0; x < 90; x++) {
      validPerm();
      lockSquares();
      lonelySquares();
    }
    for (int row = 0; row < arr.length; row++) {
      for (int col = 0; col < arr[0].length; col++) {
        if (arr[row][col] != null && arr[row][col].getNumber() > 0) {
          System.out.println(arr[row][col].getArrayList());
        }
      }
    }
  }
  private static void validPerm() {
    boolean isClue = false;
    for (int row = 0; row < arr.length; row++) {
      for (int col = 0; col < arr[0].length; col++) {
        if (arr[row][col] != null && arr[row][col].getNumber() > 0) {
          isClue = true;
        } else {
          isClue = false;
        }
        if (arr[row][col] != null && isClue) {
          ArrayList<Permutations> perm = arr[row][col].getArrayList();
          for (int i = 0; i < perm.size(); i++) {
            if (perm.size() > 1) {
              int height = perm.get(i).getHeight();
              int width = perm.get(i).getWidth();
              int verOff = perm.get(i).getVO();
              int horOff = perm.get(i).getHO();
              for (int j = row + verOff - height + 1; j <= row + verOff; j++) {
                for (int k = col + horOff - width + 1; k <= col + horOff; k++) {
                  if (arr[j][k] != null && !(row == j && col == k)) {
                    perm.remove(i);
                    arr[row][col] = new Square(arr[row][col].getNumber(), perm);
                    i--;
                    j = row + verOff + 1;
                    break;
                  } else {
                    arr[row][col] = new Square(arr[row][col].getNumber(), perm);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  private static void lockSquares() {
    for (int row = 0; row < arr.length; row++) {
	  for (int col = 0; col < arr[0].length; col++) {
	    if (arr[row][col] != null && arr[row][col].getNumber() > 0) {
	      ArrayList<Permutations> perm = arr[row][col].getArrayList();
	      if (perm.size() == 1) {
	        int h = perm.get(0).getHeight();
	        int w = perm.get(0).getWidth();
	        int vo = perm.get(0).getVO();
	        int ho = perm.get(0).getHO();
            int num = arr[row][col].getNumber();
            for (int j = 0; j < h; j++) {
              for (int k = 0; k < w; k++) {
	            arr[row - (h - vo - 1) + j][col - (w - ho - 1) + k] = new Square(true);
	          }
	        }
	        arr[row][col] = new Square(num, perm, true);
	      }
	    }
	  }
	}
  }
  private static void lonelySquares() {
	ArrayList<Square> possible = new ArrayList<>();
    ArrayList<Permutations> p = new ArrayList<>();
    int goalR = 0;
    int goalC = 0;
    for (int row = 0; row < arr.length; row++) {
      for (int col = 0; col < arr[0].length; col++) {
        if (arr[row][col] == null) {
          for (int r = 0; r < arr.length; r++) {
            for (int c = 0; c < arr[0].length; c++) {
              if (arr[r][c] != null && arr[r][c].getNumber() > 0 && arr[r][c].getArrayList().size() > 1) {
                ArrayList<Permutations> perms = arr[r][c].getArrayList();
                for (int i = 0; i < perms.size(); i++) {
                  int h = perms.get(i).getHeight();
                  int w = perms.get(i).getWidth();
                  int vo = perms.get(i).getVO();
                  int ho = perms.get(i).getHO();
                  if (arr[r][c].getArrayList().size() > 1) {
                    if (((r - h + 1 + vo) <= row && (r + vo) >= row) && ((c - w + 1 + ho) <= col && (c + ho) >= col)) {
                      p.add(new Permutations(vo, ho, h, w));
                      goalR = r;
                      goalC = c;
                      possible.add(new Square(arr[r][c].getNumber(), p));
                    }
                  }
                }
              }
            }
          }
          if (possible.size() == 1) {
            arr[goalR][goalC] = possible.get(0);
            row = arr.length;              
            break;
          }
          possible.clear();
          p.clear();
        }
      }
    }
  }
  private static void printPuzzle() {
    for (int row = 0; row < arr.length; row++) {
	  for (int col = 0; col < arr[0].length; col++) {
        if (arr[row][col] == null) {
	      System.out.print(" x ");
	    }
        if (arr[row][col] != null) {
	      System.out.print(" " + arr[row][col].getNumber() + " ");
	    }
	  }
      System.out.println();
	}
    System.out.println();
  }
  private static void permLists() {
    ArrayList<Permutations> arr2 = new ArrayList<>();
	ArrayList<Permutations> arr3 = new ArrayList<>();
	ArrayList<Multiples> array = new ArrayList<>();
	for (int row = 0; row < arr.length; row++) {
	  for (int col = 0; col < arr[0].length; col++) {
	    if (arr[row][col] != null) {
	      int num = arr[row][col].getNumber();
	      array = Multiples.getMultiples(num);
	      for (int i = 0; i < array.size(); i++) {
	        int height = array.get(i).getHeight();
	        int width = array.get(i).getWidth();
	        for (int j = 0; j < height; j++) {
	          for (int k = 0; k < width; k++) {
	            if (row + j - height + 1 >= 0 && row + j < arr.length && col + k - width + 1 >= 0 && col + k < arr[0].length) {
	              arr2.add(new Permutations(j, k, height, width));
	              arr[row][col] = new Square(arr[row][col].getNumber(), arr2);
	            }
	            arr3.add(new Permutations(j, k, height, width));
	          }
	        }
	      }
	      arr2.clear();
	    }
	  }
	 }
 }
}
