package home.sj;

//import java.awt.Color;
import java.util.ArrayList;

public class Main{
  public static void main(String[] args) {
    Square[][] arr = new Square[15][15];
    
    arr[0][0] = new Square(5, null);
    arr[0][9] = new Square(5, null);
    arr[0][10] = new Square(1, null);
    arr[0][12] = new Square(6, null);

    arr[1][0] = new Square(3, null);
    arr[1][2] = new Square(2, null);
    arr[1][4] = new Square(8, null);
    arr[1][11] = new Square(2, null);
    
    arr[2][1] = new Square(1, null);
    arr[2][2] = new Square(1, null);
    arr[2][3] = new Square(2, null);
    arr[2][5] = new Square(1, null);
    arr[2][8] = new Square(5, null);
    arr[2][11] = new Square(1, null);
    
    arr[3][4] = new Square(4, null);
    arr[3][5] = new Square(1, null);
    arr[3][6] = new Square(5, null);
    
    arr[4][0] = new Square(2, null);
    arr[4][5] = new Square(6, null);
    arr[4][8] = new Square(1, null);
    arr[4][10] = new Square(1, null);
    arr[4][12] = new Square(2, null);
    arr[4][13] = new Square(2, null);
    
    arr[5][0] = new Square(4, null);
    arr[5][4] = new Square(4, null);
    arr[5][6] = new Square(4, null);
    arr[5][13] = new Square(2, null);
    
    arr[6][4] = new Square(4, null);
    arr[6][8] = new Square(6, null);
    arr[6][9] = new Square(3, null);
    arr[6][13] = new Square(2, null);
    
    arr[7][4] = new Square(4, null);
    arr[7][5] = new Square(3, null);
    arr[7][9] = new Square(1, null);
    arr[7][13] = new Square(2, null);
    
    arr[8][5] = new Square(5, null);
    arr[8][7] = new Square(1, null);
    arr[8][9] = new Square(2, null);
    arr[8][13] = new Square(2, null);
    
    arr[9][4] = new Square(5, null);
    arr[9][6] = new Square(2, null);
    arr[9][8] = new Square(3, null);
    arr[9][10] = new Square(5, null);
    arr[9][11] = new Square(7, null);
    arr[9][13] = new Square(2, null);
    arr[9][14] = new Square(15, null);
    
    arr[10][0] = new Square(2, null);
    arr[10][1] = new Square(5, null);
    arr[10][6] = new Square(4, null);
    arr[10][12] = new Square(3, null);
    
    arr[11][4] = new Square(5, null);
    arr[11][13] = new Square(3, null);
    
    arr[12][1] = new Square(6, null);
    arr[12][7] = new Square(18, null);
    arr[12][9] = new Square(6, null);
    arr[12][10] = new Square(3, null);
    arr[12][11] = new Square(1, null);
    arr[12][12] = new Square(1, null);
    
    arr[13][9] = new Square(8, null);
    arr[13][12] = new Square(1, null);
    arr[13][13] = new Square(2, null);
    
    arr[14][12] = new Square(1, null);
    arr[14][13] = new Square(1, null);
    
    
/*    
    Square[][] arr = new Square[6][4];
    arr[0][0] = null;
    arr[0][1] = new Square(1, null);
    arr[0][2] = new Square(3, null);
    arr[0][3] = new Square(1, null);
    arr[1][0] = new Square(2, null);
    arr[1][1] = new Square(1, null);
    arr[1][2] = null;
    arr[1][3] = new Square(1, null);
    arr[2][0] = new Square(1, null);
    arr[2][1] = new Square(1, null);
    arr[2][2] = null;
    arr[2][3] = new Square(1, null);
    arr[3][0] = null;
    arr[3][1] = null;
    arr[3][2] = new Square(3, null);
    arr[3][3] = new Square(1, null);
    arr[4][0] = new Square(2, null);
    arr[4][1] = null;
    arr[4][2] = null;
    arr[4][3] = new Square(2, null);
    arr[5][0] = new Square(4, null);
    arr[5][1] = null;
    arr[5][2] = null;
    arr[5][3] = null;
*/    
    
    for (int row = 0; row < arr.length; row++) {
      for (int col = 0; col < arr[0].length; col++) {
        if (arr[row][col] == null) {
          System.out.print(" x ");
        }
        if (arr[row][col] != null) {
          System.out.print(" " + arr[row][col].getNumber() + " ");
        }
      }
      System.out.println();
    }
    System.out.println();

    ArrayList<Permutations> arr2 = new ArrayList<>();
    ArrayList<Permutations> arr3 = new ArrayList<>();
    ArrayList<Multiples> array = new ArrayList<>();

    for (int row = 0; row < arr.length; row++) {
      for (int col = 0; col < arr[0].length; col++) {
        if (arr[row][col] != null) {
          int num = arr[row][col].getNumber();
          array = Multiples.getMultiples(num);
          for (int i = 0; i < array.size(); i++) {
            int height = array.get(i).getHeight();
            int width = array.get(i).getWidth();
            for (int j = 0; j < height; j++) {
              for (int k = 0; k < width; k++) {
                if (row + j - height + 1 >= 0 && row + j < arr.length && col + k - width + 1 >= 0
                    && col + k < arr[0].length) {
                  arr2.add(new Permutations(j, k, height, width));
                  arr[row][col] = new Square(arr[row][col].getNumber(), arr2);
                }
                arr3.add(new Permutations(j, k, height, width));
              }
            }
          }
          arr2.clear();
        }
      }
    }
    
    for (int x = 0; x < 90; x++) {
      boolean isClue = false;
      for (int row = 0; row < arr.length; row++) {
        for (int col = 0; col < arr[0].length; col++) {
          if (arr[row][col] != null && arr[row][col].getNumber() > 0) {
            isClue = true;
          } else {
            isClue = false;
          }
          if (arr[row][col] != null && isClue) {
            ArrayList<Permutations> perm = arr[row][col].getArrayList();
            for (int i = 0; i < perm.size(); i++) {
              if (perm.size() > 1) {
                int height = perm.get(i).getHeight();
                int width = perm.get(i).getWidth();
                int verOff = perm.get(i).getVO();
                int horOff = perm.get(i).getHO();
                for (int j = row + verOff - height + 1; j <= row + verOff; j++) {
                  for (int k = col + horOff - width + 1; k <= col + horOff; k++) {
                    if (arr[j][k] != null && !(row == j && col == k)) {
                      perm.remove(i);
                      arr[row][col] = new Square(arr[row][col].getNumber(), perm);
                      i--;
                      j = row + verOff + 1;
                      break;
                    } else {
                      arr[row][col] = new Square(arr[row][col].getNumber(), perm);
                    }
                  }
                }
              }
            }
          }
        }
      }
      
      for (int row = 0; row < arr.length; row++) {
        for (int col = 0; col < arr[0].length; col++) {
          if (arr[row][col] != null && arr[row][col].getNumber() > 0) {
            isClue = true;
          } else {
            isClue = false;
          }
          if (arr[row][col] != null && isClue) {
            ArrayList<Permutations> perm = arr[row][col].getArrayList();

            if (perm.size() == 1) {
              int h = perm.get(0).getHeight();
              int w = perm.get(0).getWidth();
              int vo = perm.get(0).getVO();
              int ho = perm.get(0).getHO();
              int num = arr[row][col].getNumber();

              for (int j = 0; j < h; j++) {
                for (int k = 0; k < w; k++) {
                  arr[row - (h - vo - 1) + j][col - (w - ho - 1) + k] = new Square(true);
                }
              }
              arr[row][col] = new Square(num, perm, true);
            }
          }
        }
      } 
    }
    for (int row = 0; row < arr.length; row++) {
      for (int col = 0; col < arr[0].length; col++) {
        if (arr[row][col] != null && arr[row][col].getNumber() > 0) {
          System.out.println(arr[row][col].getArrayList());
        }
      }
    }
  }
}



/*
 * int count = 0;
 * 
 * for (int row = 0; row < arr.length; row++) {
 *   for (int col = 0; col < arr[0].length; col++) {
 *     if (arr[row][col] == null) {
 *       for (int r = 0; r < arr.length; r++) {
 *         for (int c = 0; c < arr[0].length; c++) {
 *           int h = arr[r][c].getHeight();
 *           int w = arr[r][c].getWidth();
 *           int vo = arr[r][c].getVO();
 *           int ho = arr[r][c].getHO();
 *           if (arr[r][c] != null && arr[r][c].getNumber() > 0) {
 *             if (arr[r][c].getArrayList().size() > 1) {
 *               if (((r - h + 1 + vo) >= row  || (r + vo) <= row) && ((c - w + ho) >= col || (c + ho) <= col)) {
 *                 count++;
 *               }
 *             }
 *           }
 *         }
 *       }
 *       if(count == 1) {
 *         do smth
 *       }
 *     }
 *   }
 * }
 */
